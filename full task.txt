Need to create javascript/typescript logic to achieve this:When creating a replenishment request need to select one performer from the list, each performer has a different distribution percentageFor example:performer A gets 10% of the trafficperformer B gets 40% of the trafficperformer C gets 50% of the trafficThe traffic is the amount of replenishment.transactions:1 transaction: 100$ -> goes to performer C (sums = {A: 0, B: 0, C: 100}) (0, 0, 100%)2 transaction: 100$ -> goes to performer B (sums = {A: 0, B: 100, C: 100})  (0, 50%, 50%)3 transaction: 100$ -> goes to performer C (sums = {A: 0, B: 100, C: 200}) (0, 33.33%, 66.66%)4 transaction: 100$ -> goes to performer C (sums = {A: 0, B: 100, C: 300}) (0, 25%, 75%)5 transaction: 100$ -> goes to performer B (sums = {A: 0, B: 200, C: 300}) (0, 40%, 60%)6 transaction: 200$ -> goes to performer C (sums = {A: 0, B: 200, C: 500}) (0, 28.57%, 71.42%)7 transaction 100$ -> goes to performer B (sums = {A: 0, B: 300, C: 500}) (0, 37.5%, 62.5%)8 transaction: 100$ -> goes to performer B (sums = {A: 0, B: 400, C: 500}) (0, 44.44%, 55.55%)9 transaction: 100$ -> goes to performer A (sums = {A: 100, B: 400, C: 500}) (10%, 40%, 50%)10 transaction: 100$ -> goes to performer C (sums = {A: 100, B: 400, C: 600}) (9.09%, 36.36%, 54.54%)11 transaction: 10$ -> goes to performer A (sums = {A: 110, B: 400, C: 600}) (9.90%, 36.03%, 54.05%)12 transaction: 50$ -> goes to performer B (sums = {A: 110, B: 450, C: 600}) (9.48%, 38.79%, 51.72%)13 transaction: 1000$ -> goes to performer C (sums = {A: 110, B: 450, C: 1600}) (5.09%, 20.83%, 74.07%)14 transaction: 100$ -> goes to performer B (sums = {A: 110, B: 550, C: 1600}) (4.86%, 24.33%, 70.79%)15 transaction: 500$ -> goes to performer B (sums = {A: 110, B: 1050, C: 1600}) (3.98%, 38.04%, 57.97%)16 transaction: 50$ -> goes to performer A (sums = {A: 160, B: 1050, C: 1600}) (5.69%, 37.36%, 56.93%)17 transaction: 150$ -> goes to performer A (sums = {A: 310, B: 1050, C: 1600}) (10.47%, 35.47%, 54.05%)18 transaction: 200$ -> goes to performer C (sums = {A: 310, B: 1050, C: 1800}) (9.15%, 33.33%, 57.51%)19 transaction: 50$ -> goes to performer B (sums = {A: 310, B: 1100, C: 1800}) (8.19%, 37.14%, 54.66%)20 transaction: 100$ -> goes to performer A (sums = {A: 410, B: 1100, C: 1800}) (12.19%, 36.36%, 51.44%)21 transaction: 300$ -> goes to performer B (sums = {A: 410, B: 1400, C: 1800}) (10.37%, 41.92%, 47.69%)22 transaction: 150$ -> goes to performer C (sums = {A: 410, B: 1400, C: 1950}) (8.20%, 38.71%, 53.08%)23 transaction: 50$ -> goes to performer A (sums = {A: 460, B: 1400, C: 1950}) (10.43%, 37.31%, 52.24%)24 transaction: 200$ -> goes to performer B (sums = {A: 460, B: 1600, C: 1950}) (9.77%, 39.39%, 50.84%)25 transaction: 100$ -> goes to performer A (sums = {A: 560, B: 1600, C: 1950}) (12.68%, 38.09%, 49.22%)26 transaction: 300$ -> goes to performer C (sums = {A: 560, B: 1600, C: 2250}) (11.11%, 35.55%, 53.33%)27 transaction: 50$ -> goes to performer B (sums = {A: 560, B: 1650, C: 2250}) (10.09%, 38.23%, 51.68%)28 transaction: 100$ -> goes to performer A (sums = {A: 660, B: 1650, C: 2250}) (15.09%, 37.25%, 47.64%)29 transaction: 200$ -> goes to performer B (sums = {A: 660, B: 1850, C: 2250}) (13.68%, 39.45%, 46.85%)30 transaction: 150$ -> goes to performer C (sums = {A: 660, B: 1850, C: 2400}) (11.47%, 37.14%, 51.39%)Real result can be different, but proportions should be +- sameConditions:- Amounts(sums) should always be +- in equal proportions (if possible) relative to the weights of the performers- At the first execution of the program, the sum for each performer will be - 0- Entry function should accept performers array and replenishment amount    - Performers array size: from 0 to n    - Amount: 0 to n- Entry function should always return a performer, except if the "performers" array is empty, in this case function should return a null